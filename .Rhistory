model10 = glm(bleaching ~ DCW + LS + Kd490a,
data=train, family=binomial(link = 'logit'))
#### confirm and use the one with better performance (AIC and R2)####
summary(model1)
nagelkerke(model1) # gives the pseudoR2
nagelkerke(model2)
#### confirm and use the one with better performance (AIC and R2)####
summary(model1)
summary(model2)
summary(model3)
summary(model4)
summary(model5)
summary(model6)
summary(model7)
summary(model8)
summary(model9)
summary(model10)
nagelkerke(model1) # gives the pseudoR2
#### Defining the threshold ####
res <- predict(model8, train, type = "response")
ROCRPred <- prediction(res, train$bleaching)
ROCRPerf <- performance(ROCRPred, "tpr", "fpr") #tpr=true positive and fpr=false positive
plot(ROCRPerf, colorize=TRUE, print.cutoffs.at=seq(0.1, by=0.1))
#### Predict for training data and find training accuracy ####
pred.prob = predict(model2, type="response")
pred.prob = ifelse(pred.prob > 0.5, 1, 0)
table(pred.prob, train$bleaching) ## Iterate for each model
#### Predict for test Data and find the test accuracy ####
attach(test)
pred.prob = predict(model2, newdata= test, type="response")
pred.prob = ifelse(pred.prob > 0.5, 1, 0)
table(pred.prob, test$bleaching)
#### Predict for training data and find training accuracy ####
y_pred <- factor(pred.prob, levels=c(0, 1))
y_act <- bleaching
mean(y_pred == y_act)
####verify which cases were correctly classified ####
attach(test)
pred.probM1 = predict(model1, newdata= test, type="response")
pred.probM1 = ifelse(pred.probM1 > 0.5, 1, 0)
pred.probM1  ###do the same for all models iterating "M2..M3..M4"
pred.probM2 = predict(model2, newdata= test, type="response")
pred.probM2 = ifelse(pred.probM2 > 0.5, 1, 0)
pred.probM2
pred.probM6 = predict(model6, newdata= test, type="response")
pred.probM6 = ifelse(pred.probM6 > 0.5, 1, 0)
pred.probM6
pred.probM8 = predict(model8, newdata= test, type="response")
pred.probM8 = ifelse(pred.probM8 > 0.5, 1, 0)
pred.probM8
### Predict for training data and find training accuracy
pred.prob1 = predict(model1, type="response")
pred.prob1 = ifelse(pred.prob1 > 0.4, 1, 0)
table(pred.prob1, train$bleaching)
## Predict for test Data and find the test accuracy.
attach(test)
pred.prob1 = predict(model1, newdata= test, type="response")
pred.prob1 = ifelse(pred.prob1 > 0.5, 1, 0)
table(pred.prob1, test$bleaching)
###Predict for training data and find training accuracy
yy_pred <- factor(pred.prob1, levels=c(0, 1))
yy_act <- test$bleaching
mean(yy_pred == yy_act)
##### comparing models using ANOVA
anova(model8, model2, test="LRT")
# 3 options
#### 1) K-fold Cross validation
# define training control
train_control <- trainControl(method="cv", number=5,
savePredictions = TRUE)
#### 2) Repeated K-fold cross validation
# define training control
train_control <- trainControl(method="repeatedcv", number=5, repeats = 200,
savePredictions = TRUE)
#### 2) Repeated K-fold cross validation
# define training control
train_control <- trainControl(method="repeatedcv", number=5, repeats = 200,
savePredictions = TRUE)
# train the model   # regardless the selected option
model1 <- train(bleaching ~ CS, data=CCB,
trControl=train_control, method="glm", family="binomial")
model2 <- train(bleaching ~ DCW, data=CCB,
trControl=train_control, method="glm", family="binomial")
model3 <- train(bleaching ~ DCW1_5, data=CCB,
trControl=train_control, method="glm", family="binomial")
model4 <- train(bleaching ~ DCW2, data=CCB,
trControl=train_control, method="glm", family="binomial")
model5 <- train(bleaching ~ CSMCS, data=CCB,
trControl=train_control, method="glm", family="binomial")
model6 <- train(bleaching ~ DCWMCS0, data=CCB,
trControl=train_control, method="glm", family="binomial")
model7 <- train(bleaching ~ DCW + DLW, data=CCB,
trControl=train_control, method="glm", family="binomial")
model8 <- train(bleaching ~ DCW + dDLW, data=CCB,
trControl=train_control, method="glm", family="binomial")
model9 <- train(bleaching ~ DCW + dDLW2m, data=CCB,
trControl=train_control, method="glm", family="binomial")
model10 <- train(bleaching ~ DCW + dDLW5m, data=CCB,
trControl=train_control, method="glm", family="binomial")
model11 <- train(bleaching ~ DCW + dDLWsite, data=CCB,
trControl=train_control, method="glm", family="binomial")
model12 <- train(bleaching ~ DCW + LS + Kd490a , data=CCB,
trControl=train_control, method="glm", family="binomial")
model13 <- train(bleaching ~ CountDays , data=CCB,
trControl=train_control, method="glm", family="binomial")
model14 <- train(bleaching ~ consecutive_days , data=CCB,
trControl=train_control, method="glm", family="binomial")
model15 <- train(bleaching ~ CountDays + CPAR, data=CCB,
trControl=train_control, method="glm", family="binomial")
model16 <- train(bleaching ~ CountDays + CPARprevm, data=CCB,
trControl=train_control, method="glm", family="binomial")
model17 <- train(bleaching ~ LS, data=CCB,
trControl=train_control, method="glm", family="binomial")
model18 <- train(bleaching ~ CPAR , data=CCB,
trControl=train_control, method="glm", family="binomial")
##### print cross-validation scores #####
summary(model1)
summary(model2)
summary(model3)
model8 <- train(bleaching ~ DCW * dDLW, data=CCB,
trControl=train_control, method="glm", family="binomial")
summary(model8)
summary(model7)
model8 <- train(bleaching ~ DCW + dDLW, data=CCB,
trControl=train_control, method="glm", family="binomial")
summary(model8)
##### gives the accuracy and kappa values #####
model1$results
#### getting the probabilities of each "event" of the test dataset ####
# Model 6 is used as example
pred.probM6 = predict(model5, type="prob")
pred.probM6 = ifelse(pred.probM5 > 0.5, 1, 0)
pred.probM6 = ifelse(pred.probM6 > 0.5, 1, 0)
pred.probM6
### Create new columns to be used in the 3D plot (this should be done separately from the previous step)
pred.probM2 = predict(model2, type="prob")
pred.probM2$no_bleaching <- pred.probM2[,1]
pred.probM2$bleaching <- pred.probM2[,2]
pred.probM2
pred.probM3 = predict(model3, type="prob")
pred.probM3$no_bleaching <- pred.probM3[,1]
pred.probM3$bleaching <- pred.probM3[,2]
pred.probM3
pred.probM4 = predict(model4, type="prob")
pred.probM4$no_bleaching <- pred.probM4[,1]
pred.probM4$bleaching <- pred.probM4[,2]
pred.probM4
pred.probM5 = predict(model5, type="prob")
pred.probM5$no_bleaching <- pred.probM5[,1]
pred.probM5$bleaching <- pred.probM5[,2]
pred.probM5
#### ####
CCBplot = read.csv("DCW_PAR_Kd.csv") # import dataset
CCBplot[,15] <- as.numeric(CCBplot[,15])
CCBplot$site_year <- paste(CCBplot$site_name, CCBplot$year)
CCBplot <-subset(CCBplot, DCW != 0)
CCBplot <- subset(CCBplot, !site_name  %in% c('ESC','GAV', 'CAN',
'CAR', 'LNV'))
str(CCBplot)
#### ploting usin plot() ####
DCW <- plot(CCB$DCW,pred.probM2$bleaching)
g=glm(bleaching~DCW,family=binomial,CCBplot)
curve(predict(g,data.frame(DCW=x),type="resp"),add=TRUE)
#### ploting usin plot() ####
DCW <- plot(CCB$DCW,pred.probM2$bleaching)
g=glm(bleaching~DCW,family=binomial,CCBplot)
curve(predict(g,data.frame(DCW=x),type="resp"),add=TRUE)
### plotting using ggplot2
(DCW <- ggplot(CCBplot, aes(x=DCW, y=bleaching, colour=dDLWln, size=dDLWln)) +
geom_point(position = position_jitter(w=0, h=0)) +
scale_color_gradient(low="red4", high="yellow2") +
theme_classic() +
stat_smooth(method="glm", method.args = list(family="binomial"),se=FALSE,
fullrange=T, colour = "gray25"))+
scale_x_continuous(breaks=seq(-24,0,4))
# Step 1 create a "temporary data frame" for plotting
probM6 = predict(model6, type="prob")
probM6 = ifelse(probM6 > 0.5, 1, 0)
probM6 <- as.data.frame(probM6)
probM6$no_bleaching <- probM6[,1]
probM6$bleaching <- probM6[,2]
probM6
CCB$probM6 <- paste(probM6$bleaching)
CCB$bleaching_probM6 <- ifelse(CCB$probM6== 0, "No", "Yes")
#### Plotting the probability of bleaching and its associated errors
# with label of "bleaching" on top and horizontal
spDCW_dDLWlnM6 <- ggplot(CCB, aes(DCW, dDLWln, label=site_year)) +
geom_point(aes(shape=probM6, colour=probM6), size=4) +
labs(shape="Bleaching", colour="Bleaching") +
scale_shape_manual(values=c(1,19)) +
scale_color_manual(values=c("gray27", "midnightblue")) +
geom_text(data=subset(CCB, bleaching_status == "Yes"), size= 5,
nudge_x = 0.06, nudge_y = 0.06, check_overlap = F) +
scale_y_continuous(name="ln(dDLW)", position="right", breaks = c(2,3,4),
limits = c(1,5)) +
scale_x_continuous(breaks = c(-4,-8,-12,-16,-20), limits = c(-24,0)) +
theme_classic() +
theme(legend.position = "top", legend.box = "horizontal")+
theme(axis.text.x = element_text(color="gray15", size=12),
axis.text.y = element_text(color="gray15", size=12))
spDCW_dDLWlnM6
spDCW_dDLWln <- ggplot(CCB, aes(DCW, dDLWln, label=site_year)) +
geom_point(aes(shape=bleaching_status, colour=bleaching_status), size=4) +
labs(shape="Bleaching", colour="Bleaching") +
scale_shape_manual(values=c(1,19)) +
scale_color_manual(values=c("gray1", "midnightblue")) +
geom_text(data=subset(CCB, bleaching_status == "Yes"), size= 5,
nudge_x = 0.06, nudge_y = 0.06, check_overlap = F) +
scale_y_continuous(name="(ln)dDLW", position="right", breaks = c(2,3,4),
limits = c(1.5, 4.6)) +
scale_x_continuous(breaks = c(-4,-8,-12,-16,-20), limits = c(-24,0)) +
theme_classic() +
theme(legend.position = "top", legend.box = "horizontal",
legend.text=element_text(size=14),
legend.title = element_text(size = 14))+
theme(axis.text.x = element_text(color="gray15", size=12),
axis.text.y = element_text(color="gray15", size=12))
spDCW_dDLWln
spDCW_dDLW <- ggplot(CCB, aes(DCW, dDLW, label=site_year)) +
geom_point(aes(shape=bleaching_status, colour=bleaching_status), size=4) +
labs(shape="Bleaching", colour="Bleaching") +
scale_shape_manual(values=c(1,19)) +
scale_color_manual(values=c("gray1", "midnightblue")) +
geom_text(data=subset(CCB, bleaching_status == "Yes"), size= 5,
nudge_x = 0.06, nudge_y = 0.06, check_overlap = F) +
scale_y_continuous(name="dDLW", position="right", breaks = c(10,20,30,40,50),
limits = c(1, 50)) +
scale_x_continuous(breaks = c(-4,-8,-12,-16,-20), limits = c(-24,0)) +
theme_classic() +
theme(legend.position = "top", legend.box = "horizontal",
legend.text=element_text(size=14),
legend.title = element_text(size = 14))+
theme(axis.text.x = element_text(color="gray15", size=12),
axis.text.y = element_text(color="gray15", size=12))
spDCW_dDLW
# To have plain backgound first set
xaxis <- list(title= "DCW", showgrid = FALSE,
autotick = FALSE, ticks = "inside",  tick0 = 0,  dtick = 2,
ticklen = 5,  tickwidth = 2,  tickcolor = toRGB("black"))
yaxis <- list(title= "Probability of bleaching", showgrid = FALSE,
autotick = FALSE, ticks = "outside",  tick0 = 0,  dtick = 0.25,
ticklen = 5,  tickwidth = 2,  tickcolor = toRGB("black"))
(M2_2D <- plot_ly(data=CCB, x=CCB$DCW, y=pred.probM2$bleaching,
color=CCB$bleaching_status, colors = "Greys",
type = "scatter", mode = "markers",
marker = list(size = 8,
line = list(color = 'black',
width = 1))) %>%
layout(title = " ",
xaxis = xaxis,
yaxis = yaxis))
xaxis <- list(title= "DCM", showgrid = FALSE,
autotick = FALSE, ticks = "inside",  tick0 = 0,  dtick = 2,
ticklen = 5,  tickwidth = 2,  tickcolor = toRGB("black"))
yaxis <- list(title= "Probability of bleaching", showgrid = FALSE,
autotick = FALSE, ticks = "outside",  tick0 = 0,  dtick = 0.25,
ticklen = 5,  tickwidth = 2,  tickcolor = toRGB("black"))
(M5_2D <- plot_ly(data=CCB, x=CCB$DCM, y=pred.probM5$bleaching,
color=CCB$bleaching_status, colors = "Greys",
type = "scatter", mode = "markers",
marker = list(size = 8,
line = list(color = 'black',
width = 1))) %>%
layout(title = " ",
xaxis = xaxis,
yaxis = yaxis))
xaxis <- list(title= "(ln)dDLW", showgrid = TRUE)
yaxis <- list(title= "DCW", showgrid = TRUE)
zaxis <- list(title= "Pblx", showgrid = TRUE)
(M4_3D <- plot_ly(x=CCB$DLWln, y=CCB$DCW, z=pred.probM4$bleaching,
type="scatter3d", mode="markers", color=CCB$DLWln) %>%
layout(
title = "Cold coral bleaching DCW + (ln)DLW",
scene = list(
xaxis = xaxis, #list(title = "(ln)DLW"),
yaxis = yaxis, #list(title = "DCW"),
zaxis = zaxis)#list(title = "Pblx")
))
xaxis <- list(title= "(ln)dDLW", showgrid = TRUE)
yaxis <- list(title= "DCW", showgrid = TRUE)
zaxis <- list(title= "Pblx", showgrid = TRUE)
(M6_3D <- plot_ly(x=CCB$dDLWln, y=CCB$DCW, z=pred.probM6$bleaching,
type="scatter3d", mode="markers", color=CCB$bleaching_status,
colors = "Greys",
marker = list(size = 8,
line = list(color = 'black',
width = 0.1))) %>%
layout(
title = "Cold coral bleaching DCW + (ln)dDLW scatter plot",
scene = list(
xaxis = xaxis, # or.. list(title = "(ln)dDLW"),
yaxis = yaxis, # or.. list(title = "DCW"),
zaxis = zaxis) # or.. list(title = Pblx)
))
M2_2D
M4_3D
M6_3D
##Graphing your 2D & 3d scatterplot using plotly's scatter3d type:
# To have plain backgound first set
xaxis <- list(title= "DCW", showgrid = FALSE,
autotick = FALSE, ticks = "inside",  tick0 = 0,  dtick = 2,
ticklen = 5,  tickwidth = 2,  tickcolor = toRGB("black"))
yaxis <- list(title= "Probability of bleaching", showgrid = FALSE,
autotick = FALSE, ticks = "outside",  tick0 = 0,  dtick = 0.25,
ticklen = 5,  tickwidth = 2,  tickcolor = toRGB("black"))
(M2_2D <- plot_ly(data=CCB, x=CCB$DCW, y=pred.probM2$bleaching,
color=CCB$bleaching_status, colors = "Greys",
type = "scatter", mode = "markers",
marker = list(size = 8,
line = list(color = 'black',
width = 1))) %>%
layout(title = " ",
xaxis = xaxis,
yaxis = yaxis))
# (M2_2D <- plot_ly(data=CCB, x=CCB$DCW, y=pred.probM2$bleaching,
#                  color=CCB$bleaching_status, colors = "Greys",
#                  type = "scatter", mode = "markers",
#                  marker = list(size = 8,
#                                line = list(color = 'black',
#                                            width = 1))) %>%
#   layout(title = " ",
#          xaxis = xaxis,
#          yaxis = yaxis))
xaxis <- list(title= "DCM", showgrid = FALSE,
autotick = FALSE, ticks = "inside",  tick0 = 0,  dtick = 2,
ticklen = 5,  tickwidth = 2,  tickcolor = toRGB("black"))
yaxis <- list(title= "Probability of bleaching", showgrid = FALSE,
autotick = FALSE, ticks = "outside",  tick0 = 0,  dtick = 0.25,
ticklen = 5,  tickwidth = 2,  tickcolor = toRGB("black"))
(M5_2D <- plot_ly(data=CCB, x=CCB$DCM, y=pred.probM5$bleaching,
color=CCB$bleaching_status, colors = "Greys",
type = "scatter", mode = "markers",
marker = list(size = 8,
line = list(color = 'black',
width = 1))) %>%
layout(title = " ",
xaxis = xaxis,
yaxis = yaxis))
xaxis <- list(title= "(ln)dDLW", showgrid = TRUE)
yaxis <- list(title= "DCW", showgrid = TRUE)
zaxis <- list(title= "Pblx", showgrid = TRUE)
(M4_3D <- plot_ly(x=CCB$DLWln, y=CCB$DCW, z=pred.probM4$bleaching,
type="scatter3d", mode="markers", color=CCB$DLWln) %>%
layout(
title = "Cold coral bleaching DCW + (ln)DLW",
scene = list(
xaxis = xaxis, #list(title = "(ln)DLW"),
yaxis = yaxis, #list(title = "DCW"),
zaxis = zaxis)#list(title = "Pblx")
))
xaxis <- list(title= "(ln)dDLW", showgrid = TRUE)
yaxis <- list(title= "DCW", showgrid = TRUE)
zaxis <- list(title= "Pblx", showgrid = TRUE)
(M6_3D <- plot_ly(x=CCB$dDLWln, y=CCB$DCW, z=pred.probM6$bleaching,
type="scatter3d", mode="markers", color=CCB$bleaching_status,
colors = "Greys",
marker = list(size = 8,
line = list(color = 'black',
width = 0.1))) %>%
layout(
title = "Cold coral bleaching DCW + (ln)dDLW scatter plot",
scene = list(
xaxis = xaxis, # or.. list(title = "(ln)dDLW"),
yaxis = yaxis, # or.. list(title = "DCW"),
zaxis = zaxis) # or.. list(title = Pblx)
))
M2_2D
M4_3D
M6_3D
xaxis <- list(title= "(ln)dDLW", showgrid = TRUE)
yaxis <- list(title= "DCW", showgrid = TRUE)
zaxis <- list(title= "Pblx", showgrid = TRUE)
(M6_3D <- plot_ly(x=CCB$dDLWln, y=CCB$DCW, z=pred.probM6$bleaching,
type="scatter3d", mode="markers", color=CCB$bleaching_status,
colors = "Greys",
marker = list(size = 8,
line = list(color = 'black',
width = 0.1))) %>%
layout(
title = "Cold coral bleaching DCW + (ln)dDLW scatter plot",
scene = list(
xaxis = xaxis, # or.. list(title = "(ln)dDLW"),
yaxis = yaxis, # or.. list(title = "DCW"),
zaxis = zaxis) # or.. list(title = Pblx)
))
# Create a shareable link to the chart
# Set up API credentials: https://plot.ly/r/getting-started
M2_2D_online = api_create(M2_2D, filename="Cold coral bleaching DCW")
M6_3D
(M6_3D <- plot_ly(x=CCB$dDLWln, y=CCB$DCW, z=pred.probM6$bleaching,
type="scatter3d", mode="markers", color=CCB$bleaching_status,
colors = "Greys",
marker = list(size = 8,
line = list(color = 'black',
width = 0.1))) %>%
layout(
title = "Cold coral bleaching DCW + (ln)dDLW scatter plot",
scene = list(
xaxis = xaxis, # or.. list(title = "(ln)dDLW"),
yaxis = yaxis, # or.. list(title = "DCW"),
zaxis = zaxis) # or.. list(title = Pblx)
))
# Step 1 create a "temporary data frame" for plotting
probM6 = predict(model6, type="prob")
probM6 = ifelse(probM6 > 0.5, 1, 0)
probM6 <- as.data.frame(probM6)
probM6$no_bleaching <- probM6[,1]
probM6$bleaching <- probM6[,2]
probM6
CCB$probM6 <- paste(probM6$bleaching)
CCB$bleaching_probM6 <- ifelse(CCB$probM6== 0, "No", "Yes")
xaxis <- list(title= "(ln)dDLW", showgrid = TRUE)
yaxis <- list(title= "DCW", showgrid = TRUE)
zaxis <- list(title= "Pblx", showgrid = TRUE)
(M4_3D <- plot_ly(x=CCB$DLWln, y=CCB$DCW, z=pred.probM4$bleaching,
type="scatter3d", mode="markers", color=CCB$DLWln) %>%
layout(
title = "Cold coral bleaching DCW + (ln)DLW",
scene = list(
xaxis = xaxis, #list(title = "(ln)DLW"),
yaxis = yaxis, #list(title = "DCW"),
zaxis = zaxis)#list(title = "Pblx")
))
M2_2D
M4_3D
# xaxis <- list(title= "DCM", showgrid = FALSE,
#               autotick = FALSE, ticks = "inside",  tick0 = 0,  dtick = 2,
#               ticklen = 5,  tickwidth = 2,  tickcolor = toRGB("black"))
# yaxis <- list(title= "Probability of bleaching", showgrid = FALSE,
#               autotick = FALSE, ticks = "outside",  tick0 = 0,  dtick = 0.25,
#               ticklen = 5,  tickwidth = 2,  tickcolor = toRGB("black"))
#
(M5_2D <- plot_ly(data=CCB, x=CCB$DCM, y=pred.probM5$bleaching,
color=CCB$bleaching_status, colors = "Greys",
type = "scatter", mode = "markers",
marker = list(size = 8,
line = list(color = 'black',
width = 1))) %>%
layout(title = " ",
xaxis = xaxis,
yaxis = yaxis))
xaxis <- list(title= "DCM", showgrid = FALSE,
autotick = FALSE, ticks = "inside",  tick0 = 0,  dtick = 2,
ticklen = 5,  tickwidth = 2,  tickcolor = toRGB("black"))
yaxis <- list(title= "Probability of bleaching", showgrid = FALSE,
autotick = FALSE, ticks = "outside",  tick0 = 0,  dtick = 0.25,
ticklen = 5,  tickwidth = 2,  tickcolor = toRGB("black"))
#
(M5_2D <- plot_ly(data=CCB, x=CCB$DCM, y=pred.probM5$bleaching,
color=CCB$bleaching_status, colors = "Greys",
type = "scatter", mode = "markers",
marker = list(size = 8,
line = list(color = 'black',
width = 1))) %>%
layout(title = " ",
xaxis = xaxis,
yaxis = yaxis))
#
(M5_2D <- plot_ly(data=CCB, x=CCB$DCM, y=pred.probM5$bleaching,
color=CCB$bleaching_status, colors = "Greys",
type = "scatter", mode = "markers",
marker = list(size = 8,
line = list(color = 'black',
width = 1))) %>%
layout(title = " ",
xaxis = xaxis,
yaxis = yaxis))
(M2_2D <- plot_ly(data=CCB, x=CCB$DCW, y=pred.probM2$bleaching,
color=CCB$bleaching_status, colors = "Greys",
type = "scatter", mode = "markers",
marker = list(size = 8,
line = list(color = 'black',
width = 1))) %>%
layout(title = " ",
xaxis = xaxis,
yaxis = yaxis))
##Graphing your 2D & 3d scatterplot using plotly's scatter3d type:
# To have plain backgound first set
xaxis <- list(title= "DCW", showgrid = FALSE,
autotick = FALSE, ticks = "inside",  tick0 = 0,  dtick = 2,
ticklen = 5,  tickwidth = 2,  tickcolor = toRGB("black"))
yaxis <- list(title= "Probability of bleaching", showgrid = FALSE,
autotick = FALSE, ticks = "outside",  tick0 = 0,  dtick = 0.25,
ticklen = 5,  tickwidth = 2,  tickcolor = toRGB("black"))
(M2_2D <- plot_ly(data=CCB, x=CCB$DCW, y=pred.probM2$bleaching,
color=CCB$bleaching_status, colors = "Greys",
type = "scatter", mode = "markers",
marker = list(size = 8,
line = list(color = 'black',
width = 1))) %>%
layout(title = " ",
xaxis = xaxis,
yaxis = yaxis))
xaxis <- list(title= "(ln)dDLW", showgrid = TRUE)
yaxis <- list(title= "DCW", showgrid = TRUE)
zaxis <- list(title= "Pblx", showgrid = TRUE)
(M4_3D <- plot_ly(x=CCB$DLWln, y=CCB$DCW, z=pred.probM4$bleaching,
type="scatter3d", mode="markers", color=CCB$DLWln) %>%
layout(
title = "Cold coral bleaching DCW + (ln)DLW",
scene = list(
xaxis = xaxis, #list(title = "(ln)DLW"),
yaxis = yaxis, #list(title = "DCW"),
zaxis = zaxis)#list(title = "Pblx")
))
M2_2D
M4_3D
M2_2D
# Create a shareable link to the chart
# Set up API credentials: https://plot.ly/r/getting-started
M2_2D_online = api_create(M2_2D, filename="Cold coral bleaching DCW")
M4_3D
